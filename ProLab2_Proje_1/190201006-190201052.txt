package sample;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.scene.transform.Scale;
import javafx.stage.Stage;
import org.w3c.dom.css.Rect;
import sample.Classes.*;
import sample.Classes.Object;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.Inet4Address;
import java.util.*;

public class Main extends Application {

    //Control Variables
    public static boolean isButtonPressed = false;
    public static int[][] maze = new int[11][13];
    public static boolean isTembel = false;
    public static boolean isGozluklu = false;
    public static boolean isWin = false;

    //Paths
    String tembelPath = "C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\tembel_50.png";
    String gözlukluPath = "C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\Gözlüklü_50.png";

    //GUI
    public static ImageView[] golds = new ImageView[5] ;
    public static int[][] coordinates;
    public static ImageView playerImage;
    public static ImageView sirine;
    public static ImageView mantar;
    public static ImageView azmanImage;
    public static int[] azmanBeginningCoordinates = new int[2];
    public static ImageView gargamelImage;
    public static int[] gargamelBeginningCoordinates = new int[2];
    public static Text scoreText;

    //Player
    Gozluklu gozluklu = new Gozluklu(1,"Gözlüklü","Player",new ArrayList<>(),20,5,15,2);
    Tembel tembel = new Tembel(2,"Tembel","Player",new ArrayList<>(),20,5,15,1);
    public static Player[] players = new Player[2];
    public static Player player;
    public boolean isBeginning =false;

    //Enemy
    public static Azman azman = new Azman(1,"Azman","Enemy",new ArrayList<>(),1,false);
    public static Gargamel gargamel = new Gargamel(2,"Gargamel","Enemy",new ArrayList<>(),2,true);

    //Class Variables
    public static Altın[] goldObjects = new Altın[5];
    public static Mantar mantarObject;

    //Dijkstra
    public static ArrayList<Node>  nodes = new ArrayList<>();


    @Override
    public void start(Stage primaryStage) throws Exception {
        Parent root = FXMLLoader.load(getClass().getResource("sample.fxml"));
        Scene scene = new Scene(root, 750, 650);
        primaryStage.setTitle("Smurfs Maze");
        primaryStage.setScene(scene);
        primaryStage.show();

        createMaze();
        createGraph();

        scene.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent keyEvent) {
                if (isButtonPressed && !isWin) {
                    if (player.getName().equals("Gözlüklü")) Move(keyEvent);
                    updateScene(scene);
                    checkGetDamage();
                    if (!Move(keyEvent)) {
                        paintDijkstra(scene, azman.enKısaYol(), 1);
                        paintDijkstra(scene, gargamel.enKısaYol(), 2);
                    }
                    checkPickGold();
                    checkPickMushroom();
                    setHealthText();
                }
            }
        });
    }

    public static void main(String[] args) { launch(args); }

    public void createMaze() {
        File file = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\sample\\harita.txt");
        try {
            int i = 0, z = 0;
            Scanner fileScanner = new Scanner(file);
            while (fileScanner.hasNextLine()) {
                String data = fileScanner.nextLine();
                String[] datas = data.split(" ");
                if (i >= 2) {
                    for (int j = 0; j < datas.length; j++) {
                        maze[z][j] = Integer.parseInt(datas[j]);
                    }
                    z++;
                }
                i++;
            }
        } catch (FileNotFoundException e) {
            System.out.println("Bir Hata Oluştu...");
            e.printStackTrace();
        }
        players[0] = gozluklu;
        players[1] = tembel;

    }

    public boolean Move(KeyEvent keyEvent){

            if (keyEvent.getCode() == KeyCode.UP){
                int x = (int) (playerImage.getX()-50)/50;
                int y = (int) (playerImage.getY()-50)/50;

                if (y>0 && maze[y-1][x] != 0){
                    playerImage.setY(playerImage.getY()-50);
                }
            }else if(keyEvent.getCode() == KeyCode.DOWN){
                int x = (int) (playerImage.getX()-50)/50;
                int y = (int) (playerImage.getY()-50)/50;

                if (y<10 && maze[y+1][x] != 0){
                    playerImage.setY(playerImage.getY()+50);
                }
            }else if (keyEvent.getCode() == KeyCode.LEFT){
                int x = (int) (playerImage.getX()-50)/50;
                int y = (int) (playerImage.getY()-50)/50;

                if (x>0 && maze[y][x-1] != 0){
                    playerImage.setX(playerImage.getX()-50);
                }
            }else if(keyEvent.getCode() == KeyCode.RIGHT){
                int x = (int) (playerImage.getX()-50)/50;
                int y = (int) (playerImage.getY()-50)/50;

                if (x<12 && maze[y][x+1] != 0){
                    playerImage.setX(playerImage.getX()+50);
                }
            }else{
                boolean statement = checkAfterMove();
                return true;
            }
            boolean statement = checkAfterMove();
            return statement;
    }

    private boolean checkAfterMove(){
        if (playerImage.getX() == azmanImage.getX() && playerImage.getY() == azmanImage.getY()){
            player.setScor(player.getScor()-player.getAzmanDamage());
            azmanImage.setX(azmanBeginningCoordinates[0]);
            azmanImage.setY(azmanBeginningCoordinates[1]);
            return  true;
        }if (playerImage.getX() == gargamelImage.getX() && playerImage.getY() == gargamelImage.getY()){
            player.setScor(player.getScor()-player.getGargamelDamage());
            gargamelImage.setX(gargamelBeginningCoordinates[0]);
            gargamelImage.setY(gargamelBeginningCoordinates[1]);
            return true;
        }
        return false;
    }


    private void paintDijkstra(Scene scene,ArrayList<Integer> arr,int color) {
        if (color == 1){
            for (int i = 0; i < arr.size(); i++) {
                String id = "#" + Integer.toString(arr.get(i));
                Rectangle rect = (Rectangle) scene.lookup(id);
                rect.setFill(Color.LIGHTGREEN);
            }
            String id = "#" + Integer.toString(arr.get(arr.size()-1));
            Rectangle rect = (Rectangle) scene.lookup(id);

            if (((azmanImage.getX() + 50 == gargamelImage.getX()) && (azmanImage.getY() == gargamelImage.getY())) || (azmanImage.getX() - 50 == gargamelImage.getX() && (azmanImage.getY() == gargamelImage.getY())) || ((azmanImage.getX() == gargamelImage.getX()) && (azmanImage.getY() + 50 == gargamelImage.getY())) || ((azmanImage.getX() == gargamelImage.getX()) && (azmanImage.getY() + 50 == gargamelImage.getY()))){

            }else{
                azmanImage.setX(rect.getX());
                azmanImage.setY(rect.getY());
            }


            if (azmanImage.getX() == playerImage.getX() && azmanImage.getY() == playerImage.getY()){
                azmanImage.setX(azmanBeginningCoordinates[0]);
                azmanImage.setY(azmanBeginningCoordinates[1]);
                player.setScor(player.getScor()-player.getAzmanDamage());
            }
        }else if (color==2){
            for (int i = 0; i < arr.size()-1; i++) {
                String id = "#" + Integer.toString(arr.get(i));
                Rectangle rect = (Rectangle) scene.lookup(id);
                rect.setFill(Color.LIGHTBLUE);
            }
            String id = "#" + Integer.toString(arr.get(arr.size()-1));
            Rectangle rect = (Rectangle) scene.lookup(id);
            gargamelImage.setX(rect.getX());
            gargamelImage.setY(rect.getY());
            if((rect.getX() == playerImage.getX() && rect.getY() == playerImage.getY())){
                gargamelImage.setX(gargamelBeginningCoordinates[0]);
                gargamelImage.setY(gargamelBeginningCoordinates[1]);
                player.setScor(player.getScor()-player.getGargamelDamage());
                //isBeginning = true;
            }else{
                String id1 = "#" + Integer.toString(arr.get(arr.size()-2));
                Rectangle rect1 = (Rectangle) scene.lookup(id1);
                gargamelImage.setX(rect1.getX());
                gargamelImage.setY(rect1.getY());
                if((rect1.getX() == playerImage.getX() && rect1.getY() == playerImage.getY())) {
                    gargamelImage.setX(gargamelBeginningCoordinates[0]);
                    gargamelImage.setY(gargamelBeginningCoordinates[1]);
                    player.setScor(player.getScor() - player.getGargamelDamage());
                }
            }
        }
    }

    public void checkPickGold(){

        for (int i = 0; i < 5; i++) {
            if (golds[i].getX() == playerImage.getX() && golds[i].getY() == playerImage.getY()){
                if (goldObjects[i].isPicked() == false && goldObjects[i].isVisible() == true){
                    golds[i].setVisible(false);
                    goldObjects[i].setVisible(false);
                    goldObjects[i].setPicked(true);
                    player.setScor(player.getScor()+5);
                    return;
                }
            }
        }
    }

    public void checkPickMushroom(){
        if (playerImage.getX() == mantar.getX() && playerImage.getY() == mantar.getY()){
            if (mantarObject.isPicked() == false && mantar.isVisible() == true){
                mantar.setVisible(false);
                mantarObject.setVisible(false);
                mantarObject.setPicked(true);
                player.setScor(player.getScor()+50);
                return;
            }
        }
    }

    public void updateScene(Scene scene){
        for (int i = 0; i <11 ; i++) {
            for (int j = 0; j < 13; j++) {
                String id = "#" +Integer.toString(i*13+j);
                if (maze[i][j] == 2){
                    Rectangle rectangle = (Rectangle) scene.lookup(id);
                    rectangle.setFill(Color.LIGHTGREEN);
                }else if (maze[i][j] == 1){
                    Rectangle rectangle = (Rectangle) scene.lookup(id);
                    rectangle.setFill(Color.WHITE);
                }else{
                    Rectangle rectangle = (Rectangle) scene.lookup(id);
                    rectangle.setFill(Color.BLACK);
                }
            }
        }
    }

    public void checkGetDamage(){
        if (azmanImage.getX() == playerImage.getX() && azmanImage.getY() == playerImage.getY()){
            player.setScor(player.getScor()-player.getAzmanDamage());
            azmanImage.setX(azmanBeginningCoordinates[0]);
            azmanImage.setY(azmanBeginningCoordinates[1]);
        }

    }

    public void setHealthText(){
        scoreText.setText(String.valueOf(player.getScor()));
    }

    public void createGraph(){
        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 13; j++) {
                if (maze[i][j] == 1){
                    int id = i*13 + j;
                    Node node = new Node(id,null,new ArrayList<>());
                    createNeighours(node,i,j);
                    nodes.add(node);
                }else if (maze[i][j] == 0){
                    int id = i*13 + j;
                    Node node = new Node(id,null,new ArrayList<>());
                    nodes.add(node);
                }
            }
        }
    }

    public void createNeighours(Node node,int i,int j){
        if (i!=0 && i!=10 && j!=0 && j!=12){
            if (maze[i+1][j] == 1) node.getNeighbours().add((i+1)*13+j);

            if (maze[i-1][j] == 1) node.getNeighbours().add((i-1)*13+j);

            if (maze[i][j-1] == 1) node.getNeighbours().add(i*13+j-1);

            if (maze[i][j+1] == 1) node.getNeighbours().add(i*13+j+1);
        }else if(i==0){
            if (maze[i+1][j] == 1) node.getNeighbours().add((i+1)*13+j);

            if (maze[i][j-1] == 1) node.getNeighbours().add(i*13+j-1);

            if (maze[i][j+1] == 1) node.getNeighbours().add(i*13+j+1);
        }else if (j==0){
            if (maze[i+1][j] == 1) node.getNeighbours().add((i+1)*13+j);

            if (maze[i-1][j] == 1) node.getNeighbours().add((i-1)*13+j);

            if (maze[i][j+1] == 1) node.getNeighbours().add(i*13+j+1);
        }else if (i==10){
            if (maze[i-1][j] == 1) node.getNeighbours().add((i-1)*13+j);

            if (maze[i][j-1] == 1) node.getNeighbours().add(i*13+j-1);

            if (maze[i][j+1] == 1) node.getNeighbours().add(i*13+j+1);
        }else if (j==12){
            if (maze[i+1][j] == 1) node.getNeighbours().add((i+1)*13+j);

            if (maze[i-1][j] == 1) node.getNeighbours().add((i-1)*13+j);

            if (maze[i][j-1] == 1) node.getNeighbours().add(i*13+j-1);
        }
    }

    public static void dijkstra(int enemyId,int playerId){
        ArrayList<Node> clone = new ArrayList<>(nodes);
        ArrayList<Integer> distance = new ArrayList<>();
        ArrayList<Boolean> visited =  new ArrayList<>();

        for (int i = 0; i < clone.size(); i++) {
            distance.add(Integer.MAX_VALUE);
            visited.add(false);
        }
        distance.set(enemyId,0);

        for (int i = 0; i < clone.size(); i++) {
            int min = Integer.MAX_VALUE;
            int minIndex = 0;

            for (int j = 0; j < distance.size(); j++) {
                if (distance.get(j) < min && visited.get(j) != true){
                    minIndex=j;
                    min = distance.get(j);
                }
            }

            if (min == Integer.MAX_VALUE ) continue;
            visited.set(minIndex,true);
            for (Integer id : clone.get(minIndex).getNeighbours()){
                int alt = distance.get(minIndex) + 1;
                if (alt<distance.get(id)){
                    distance.set(id,alt);
                    nodes.get(id).setPrevious(nodes.get(minIndex));
                }
            }
        }
    }
}






package sample;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.shape.Rectangle;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class Controller implements Initializable {
    @FXML
    public Rectangle rct1;
    @FXML
    public Rectangle rct2;
    @FXML
    private AnchorPane anchor;
    @FXML
    private Button button;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

    }

    public void load(javafx.event.ActionEvent actionEvent) throws IOException {

        if (!Main.isTembel && !Main.isGozluklu) {
            Main.isTembel = true;
            Main.isGozluklu = false;
            Main.player = Main.players[1];
        }
        Main.isButtonPressed = true;
        AnchorPane pane = FXMLLoader.load(getClass().getResource("sample2.fxml"));
        anchor.getChildren().setAll(pane);
    }

    public void choose(MouseEvent mouseEvent){
        ImageView img = (ImageView) mouseEvent.getSource();

        if (img.getId().equals("img1")){
            Main.isTembel = true;
            Main.isGozluklu = false;
            rct1.setStrokeWidth(5);
            rct2.setStrokeWidth(0);
            Main.player = Main.players[1];
        }
        else if(img.getId().equals("img2")){
            Main.isTembel = false;
            Main.isGozluklu = true;
            rct2.setStrokeWidth(5);
            rct1.setStrokeWidth(0);
            Main.player = Main.players[0];
        }
    }
}








package sample;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import sample.Classes.Altın;
import sample.Classes.Mantar;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.*;

public class Sample2 implements Initializable {

    private int countGold = 0;
    private int countMushroom = 0;

    @FXML
    private AnchorPane anchor2;
    @FXML
    private ImageView  img3;
    @FXML
    private ImageView gargamel;
    @FXML
    private ImageView azman;
    @FXML
    private ImageView sirine;
    @FXML
    private ImageView altın1;
    @FXML
    private ImageView altın2;
    @FXML
    private ImageView altın3;
    @FXML
    private ImageView altın4;
    @FXML
    private ImageView altın5;
    @FXML
    private ImageView mantar;
    @FXML
    private Text scorText;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        defineVariables();
        changePic();
        addLines();
        addBlocks();
        enemySpawn();
        createGolds();
    }

    private void createGolds() {

        Main.golds[0] = altın1;
        Main.golds[1] = altın2;
        Main.golds[2] = altın3;
        Main.golds[3] = altın4;
        Main.golds[4] = altın5;


        Timer timerGold = new Timer();
        timerGold.schedule(new TimerTask() {
            @Override
            public void run() {

                createGoldObjects();
                Altın[] golds = Main.goldObjects;

                if (countGold % 2 == 1){
                    for (Altın a : golds) a.setVisible(false);
                    for (ImageView img : Main.golds) img.setVisible(false);
                }
                else{
                    createGoldCoordinates();
                }
                countGold++;
            }
        },0,5000);


        Timer timerMushroom = new Timer();
        timerMushroom.schedule(new TimerTask() {
            @Override
            public void run() {

                if (countMushroom % 2 == 1){
                    mantar.setVisible(false);
                }else{
                    mantar.setVisible(true);
                    createMushroom();
                }
                countMushroom++;
            }
        },0,7000);


        Timer timerEnd = new Timer();
        timerEnd.schedule(new TimerTask() {
            @Override
            public void run() {
                Platform.runLater(new Runnable() {
                    public void run() {
                        try {
                            checkWinOrLose();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                });
            }
        },0,10);
    }

    public void addLines(){
        for (int i = 0; i < 14; i++) {
            Line line = new Line(i * 50 + 50, 50, i * 50 + 50, 600);
            anchor2.getChildren().addAll(line);
        }
        for (int i = 0; i < 12; i++) {
            Line line = new Line(50, i * 50 + 50, 700, i * 50 + 50);
            anchor2.getChildren().addAll(line);
        }
    }

    public void addBlocks(){

        int k = 0;

        for (int i = 0; i < 11; i++) {
            for (int j = 0; j < 13; j++) {
                if (Main.maze[i][j] == 0){
                    Rectangle rectangle = new Rectangle(j*50+50,i*50+50,50,50);
                    String id = Integer.toString(i*13+j);
                    rectangle.setId(id);
                    rectangle.setFill(Color.BLACK);
                    anchor2.getChildren().addAll(rectangle);
                }else if (Main.maze[i][j] == 2){
                    Rectangle rectangle = new Rectangle(j*50+50,i*50+50,50,50);
                    String id = Integer.toString(i*13+j);
                    rectangle.setId(id);
                    rectangle.setFill(Color.GREEN);
                    anchor2.getChildren().addAll(rectangle);
                }else if (Main.maze[i][j] == 1){
                    Rectangle rectangle = new Rectangle(j*50+50,i*50+50,49,49);
                    String id = Integer.toString(i*13+j);
                    rectangle.setId(id);
                    rectangle.setFill(Color.WHITE);
                    anchor2.getChildren().addAll(rectangle);
                }
                k++;
            }
        }
    }


    private void changePic(){

        File fileSirine = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\Şirine.png");
        Image img = new Image(fileSirine.toURI().toString());
        sirine.setImage(img);

        if (Main.isTembel) {
            File file = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\tembel_50.png");
            Image image = new Image(file.toURI().toString());
            img3.setImage(image);
        }else{
            File file = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\Gözlüklü_50.png");
            Image image = new Image(file.toURI().toString());
            img3.setImage(image);
        }

        sirine.setX(700);
        sirine.setY(400);
        img3.setX(350);
        img3.setY(300);
    }

    private void enemySpawn(){

        File fileAzman = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\azman_50.png");
        File fileGargamel = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\gargamel.png");

        File file = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\sample\\harita.txt");
        try {
            int i =0;
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()){
                String data = scanner.nextLine();
                if (i<2){
                    String character = data.split(":")[1].split(",")[0];
                    String kapı = data.split(":")[2];

                    if (character.equals("Gargamel")){
                        Image img = new Image(fileGargamel.toURI().toString());
                        gargamel.setImage(img);

                        switch (kapı){
                            case "A":
                                gargamel.setX(200);
                                gargamel.setY(50);
                                break;

                            case "B":
                                gargamel.setX(550);
                                gargamel.setY(50);
                                break;

                            case "C":
                                gargamel.setX(50);
                                gargamel.setY(300);
                                break;

                            case "D":
                                gargamel.setX(200);
                                gargamel.setY(550);
                                break;
                        }
                    }else if(character.equals("Azman")){
                        Image img = new Image(fileAzman.toURI().toString());
                        azman.setImage(img);

                        switch (kapı){
                            case "A":
                                azman.setX(200);
                                azman.setY(50);
                                break;

                            case "B":
                                azman.setX(550);
                                azman.setY(50);
                                break;

                            case "C":
                                azman.setX(50);
                                azman.setY(300);
                                break;

                            case "D":
                                azman.setX(200);
                                azman.setY(550);
                                break;
                        }
                    }
                }
                i++;
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        Main.azmanBeginningCoordinates[0] = (int) azman.getX();
        Main.azmanBeginningCoordinates[1] = (int) azman.getY();
        Main.gargamelBeginningCoordinates[0] = (int) gargamel.getX();
        Main.gargamelBeginningCoordinates[1] = (int) gargamel.getY();
    }


    public void createGoldCoordinates(){

        int[][] coordinates = new int[5][2];
        ArrayList<Integer> xMap = new ArrayList<>();
        ArrayList<Integer> yMap = new ArrayList<>();
        int j = 0;

        Random rand = new Random();

        for (int i = 0; i < 5; i++) {
            while (true){
                int x = rand.nextInt(11);
                int y = rand.nextInt(13);

                if (!xMap.contains(x) && !yMap.contains(y)){
                    if (Main.maze[x][y] == 1){
                        coordinates[j][0] = y;
                        coordinates[j][1] = x;
                        xMap.add(x);
                        yMap.add(y);
                        j++;
                        break;
                    }
                }
            }
        }

        for (ImageView img : Main.golds){
            File fileGold = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\gold.png");
            Image image = new Image(fileGold.toURI().toString());
            img.setImage(image);
        }

        for (int i = 0; i < 5; i++) {
            Main.golds[i].setX((coordinates[i][0]*50)+50);
            Main.golds[i].setY((coordinates[i][1]*50)+50);
            Main.golds[i].setVisible(true);
        }

    }

    private void createMushroom(){
        int[] coordinate = new int[2];
        Random rand = new Random();

        while (true){
            int x = rand.nextInt(11);
            int y = rand.nextInt(13);

            if (Main.maze[x][y] == 1){
                coordinate[0] = y;
                coordinate[1] = x;
                break;
            }
        }

        File file = new File("C:\\Users\\Burhan\\Desktop\\prolab\\src\\Images\\mantar.png");
        Image image = new Image(file.toURI().toString());
        mantar.setImage(image);

        mantar.setX((coordinate[0]*50)+50);
        mantar.setY((coordinate[1]*50)+50);

    }
    
    public void createGoldObjects(){
        for (int i = 0; i < 5; i++) {
            Main.goldObjects[i] = new Altın(5,true,false);
        }
        Main.mantarObject = new Mantar(15,true,false);
    }

    public void defineVariables(){
        Main.playerImage = img3;
        Main.sirine = sirine;
        Main.mantar = mantar;
        Main.scoreText = scorText;
        Main.azmanImage = azman;
        Main.azmanBeginningCoordinates[0] = (int) azman.getX();
        Main.azmanBeginningCoordinates[1] = (int) azman.getY();
        Main.gargamelImage = gargamel;
        Main.gargamelBeginningCoordinates[0] = (int) gargamel.getX();
        Main.gargamelBeginningCoordinates[1] = (int) gargamel.getY();
        scorText.setText("20");
    }

    private void checkWinOrLose() throws IOException {
        if (Main.player.getScor() <= 0){
            AnchorPane pane = FXMLLoader.load(getClass().getResource("sample3.fxml"));
            anchor2.getChildren().setAll(pane);
        }if (sirine.getY() == img3.getY() && sirine.getX()-50 == img3.getX()){
            AnchorPane pane = FXMLLoader.load(getClass().getResource("sample3.fxml"));
            anchor2.getChildren().setAll(pane);
            Main.isWin = true;
        }



    }
}







package sample;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class Sample3 implements Initializable {

    @FXML
    private AnchorPane anchor;
    @FXML
    private Text overText;
    @FXML
    private Button quitButton;
    @FXML
    private Button playAgainButton;


    @Override
    public void initialize(URL location, ResourceBundle resources) {
        declareGUI();
    }

    public void declareGUI(){
        Main.isButtonPressed = false;

        if (Main.isWin){
            overText.setText("K A Z A N D I N");
        }else{
            overText.setText("K A Y B E T T İ N");
        }

    }

    public void loadFirstScene(ActionEvent actionEvent) {
        System.out.println("Tıklandı...");
    }

    public void quit(ActionEvent actionEvent) {
    }
}







package sample.Classes;

public class Altın extends Object{

    private int scor = 5;
    private boolean isVisible;
    private boolean isPicked;

    public Altın(int scor, boolean isVisible, boolean isPicked) {

        this.scor = scor;
        this.isVisible = isVisible;
        this.isPicked = isPicked;
    }



    public int getScor() {
        return scor;
    }

    public void setScor(int scor) {
        this.scor = scor;
    }

    public boolean isVisible() {
        return isVisible;
    }

    public void setVisible(boolean visible) {
        isVisible = visible;
    }

    public boolean isPicked() {
        return isPicked;
    }

    public void setPicked(boolean picked) {
        isPicked = picked;
    }
}





package sample.Classes;

import sample.Main;

import java.util.ArrayList;

public class Azman extends Enemy{

    private int step = 1;
    private boolean isJump = false;

    public Azman(int id, String name, String type, ArrayList<ArrayList<Integer>> coordinates, int step, boolean isJump) {
        super(id, name, type, coordinates);
        this.step = step;
        this.isJump = isJump;
    }

    public int getStep() {
        return step;
    }

    public void setStep(int step) {
        this.step = step;
    }

    public boolean isJump() {
        return isJump;
    }

    public void setJump(boolean jump) {
        isJump = jump;
    }

    @Override
    public ArrayList<Integer> enKısaYol() {
        int id = (int) ((Main.azmanImage.getX()-50)/50  + ((Main.azmanImage.getY()-50)/50)*13) ;
        int playerID = (int)((Main.playerImage.getX()-50)/50  + ((Main.playerImage.getY()-50)/50)*13);

        Main.dijkstra(id,playerID);
        ArrayList<Integer> arr = new ArrayList<>();

        int i = playerID;
        while (i!=id){
            arr.add(i);
            //.out.print(Main.nodes.get(i).getId()+" ");
            i = Main.nodes.get(i).getPrevious().getId();
        }
        return arr;
     }

}







package sample.Classes;

import java.util.ArrayList;

public abstract class Character {
    private int id;
    private String name;
    private String type;
    private ArrayList<ArrayList<Integer>> coordinates = new ArrayList<>();

    public Character(int id, String name, String type, ArrayList<ArrayList<Integer>> coordinates) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.coordinates = coordinates;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public ArrayList<ArrayList<Integer>> getCoordinates() {
        return coordinates;
    }

    public void setCoordinates(ArrayList<ArrayList<Integer>> coordinates) {
        this.coordinates = coordinates;
    }
    public abstract ArrayList<Integer> enKısaYol();
}








package sample.Classes;

public class Edge {
    private Node source;
    private Node destination;
    private boolean isVisited;

    public Edge(Node source, Node destination, boolean isVisited) {
        this.source = source;
        this.destination = destination;
        this.isVisited = isVisited;
    }

    public boolean isVisited() {
        return isVisited;
    }

    public void setVisited(boolean visited) {
        isVisited = visited;
    }

    public Node getSource() {
        return source;
    }

    public void setSource(Node source) {
        this.source = source;
    }

    public Node getDestination() {
        return destination;
    }

    public void setDestination(Node destination) {
        this.destination = destination;
    }
}






package sample.Classes;

import java.util.ArrayList;

public abstract class Enemy extends Character{

    public Enemy(int id, String name, String type, ArrayList<ArrayList<Integer>> coordinates) {
        super(id, name, type, coordinates);
    }

}









package sample.Classes;

import sample.Main;

import java.util.ArrayList;

public class Gargamel extends Enemy{

    private int step = 2;
    private boolean isJump = true;

    public Gargamel(int id, String name, String type, ArrayList<ArrayList<Integer>> coordinates, int step, boolean isJump) {
        super(id, name, type, coordinates);
        this.step = step;
        this.isJump = isJump;
    }

    public int getStep() {
        return step;
    }

    public void setStep(int step) {
        this.step = step;
    }

    public boolean isJump() {
        return isJump;
    }

    public void setJump(boolean jump) {
        isJump = jump;
    }

    @Override
    public ArrayList<Integer> enKısaYol() {
        int id = (int) ((Main.gargamelImage.getX()-50)/50  + ((Main.gargamelImage.getY()-50)/50)*13) ;
        int playerID = (int)((Main.playerImage.getX()-50)/50  + ((Main.playerImage.getY()-50)/50)*13);

        Main.dijkstra(id,playerID);
        ArrayList<Integer> arr = new ArrayList<>();

        int i = playerID;
        while (i!=id){
            arr.add(i);
            //System.out.print(Main.nodes.get(i).getId()+" ");
            i = Main.nodes.get(i).getPrevious().getId();
        }
        return arr;
    }
}









package sample.Classes;

import java.util.ArrayList;

public class Gozluklu extends Player{

    private int step;

    public Gozluklu(int id, String name, String type, ArrayList<ArrayList<Integer>> coordinates, int scor, int azmanDamage, int gargamelDamage, int step) {
        super(id, name, type, coordinates, scor, azmanDamage, gargamelDamage);
        this.step = step;
    }

    public int getStep() {
        return step;
    }

    public void setStep(int step) {
        this.step = step;
    }

    @Override
    public ArrayList<Integer> enKısaYol() {
        return new ArrayList<>();
    }
}






package sample.Classes;

public class Location {

}







package sample.Classes;

public class Mantar extends Object{
    private int scor = 50;
    private boolean isVisible;
    private boolean isPicked;

    public Mantar(int scor, boolean isVisible, boolean isPicked) {

        this.scor = scor;
        this.isVisible = isVisible;
        this.isPicked = isPicked;
    }


    public int getScor() {
        return scor;
    }

    public void setScor(int scor) {
        this.scor = scor;
    }

    public boolean isVisible() {
        return isVisible;
    }

    public void setVisible(boolean visible) {
        isVisible = visible;
    }

    public boolean isPicked() {
        return isPicked;
    }

    public void setPicked(boolean picked) {
        isPicked = picked;
    }
}









package sample.Classes;

import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.ArrayList;
import java.util.Map;

public class Node {
    private int id;
    private Node previous;
    private ArrayList<Integer> neighbours;

    public Node(int id, Node previous, ArrayList<Integer> neighbours) {
        this.id = id;
        this.previous = previous;
        this.neighbours = neighbours;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public Node getPrevious() {
        return previous;
    }

    public void setPrevious(Node previous) {
        this.previous = previous;
    }

    public ArrayList<Integer> getNeighbours() {
        return neighbours;
    }

    public void setNeighbours(ArrayList<Integer> neighbours) {
        this.neighbours = neighbours;
    }
}








package sample.Classes;

public abstract class Object {
}









package sample.Classes;

import java.util.ArrayList;

public abstract class Player extends Character{

    private int scor;
    private int azmanDamage;
    private int gargamelDamage ;

    public Player(int id, String name, String type, ArrayList<ArrayList<Integer>> coordinates, int scor, int azmanDamage, int gargamelDamage) {
        super(id, name, type, coordinates);
        this.scor = scor;
        this.azmanDamage = azmanDamage;
        this.gargamelDamage = gargamelDamage;
    }

    public int getScor() {
        return scor;
    }

    public void setScor(int scor) {
        this.scor = scor;
    }

    public int getAzmanDamage() {
        return azmanDamage;
    }

    public void setAzmanDamage(int azmanDamage) {
        this.azmanDamage = azmanDamage;
    }

    public int getGargamelDamage() {
        return gargamelDamage;
    }

    public void setGargamelDamage(int gargamelDamage) {
        this.gargamelDamage = gargamelDamage;
    }

    public void puaniGoster(){
        System.out.println("Puan = "+this.getScor());
    }

}










package sample.Classes;

import java.util.ArrayList;

public class Tembel extends Player{
    private int step;

    public Tembel(int id, String name, String type, ArrayList<ArrayList<Integer>> coordinates, int scor, int azmanDamage, int gargamelDamage, int step) {
        super(id, name, type, coordinates, scor, azmanDamage, gargamelDamage);
        this.step = step;
    }

    public int getStep() {
        return step;
    }

    public void setStep(int step) {
        this.step = step;
    }


    @Override
    public ArrayList<Integer> enKısaYol() {
        return new ArrayList<>();
    }
}



